{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome The Advection Diffusion Equation Post Large Eddy Simulation (adepostles) code solves tracer transport as a post processing step to LES simulations. It was initially developped to treat output from DALES , but the idea is to be able to post process a broad set of LES outputs, as long as they conform to NetCDF. Features IBM MPI parallelization NetCDF input/output format NOTE: The parallelization goal is to allow multiple initial conditions and source profiles to be calculated in parallel for the same LES simulation output","title":"Welcome"},{"location":"#welcome","text":"The Advection Diffusion Equation Post Large Eddy Simulation (adepostles) code solves tracer transport as a post processing step to LES simulations. It was initially developped to treat output from DALES , but the idea is to be able to post process a broad set of LES outputs, as long as they conform to NetCDF.","title":"Welcome"},{"location":"#features","text":"IBM MPI parallelization NetCDF input/output format NOTE: The parallelization goal is to allow multiple initial conditions and source profiles to be calculated in parallel for the same LES simulation output","title":"Features"},{"location":"installation/","text":"Installation Let us run throught the installation of ADEpostLES Requirements Fortran compiler : recomended gfortran (tested with 11 and 13) Cmake : recomended to just download and install the binary MPI : tested with Open MPI > 4.1.4. Installation guides: 1 , 2 NetCDF : Netcdf fortran, recomended installation using conda NOTE You might need to export the paths to your netcdf-fortran instalations, you can find them using nf-config . See the following example, cmake compilation first looks for these environment variables. export NETCDF_INCLUDE=/home/user/miniconda3/envs/fort/include export NETCDF_LIB=/home/user/miniconda3/envs/fort/lib NOTE When compiling in SLRUM environments like DelftBlue, the following commands are enough to meet requirements: module load 2023r1-gcc11 module load openmpi/4.1.4 module load cmake/3.24.3 module load netcdf-fortran/4.6.0 Compilation Clone the github repo git clone https://github.com/lorenzodonadio/adepostles.git Create a build directory, run Cmake and compile with make cd adepostles mkdir build cd build cmake .. make Compilations is finished, the executable should be located at: /adepostles/build/bin/main","title":"Installation"},{"location":"installation/#installation","text":"Let us run throught the installation of ADEpostLES","title":"Installation"},{"location":"installation/#requirements","text":"Fortran compiler : recomended gfortran (tested with 11 and 13) Cmake : recomended to just download and install the binary MPI : tested with Open MPI > 4.1.4. Installation guides: 1 , 2 NetCDF : Netcdf fortran, recomended installation using conda NOTE You might need to export the paths to your netcdf-fortran instalations, you can find them using nf-config . See the following example, cmake compilation first looks for these environment variables. export NETCDF_INCLUDE=/home/user/miniconda3/envs/fort/include export NETCDF_LIB=/home/user/miniconda3/envs/fort/lib NOTE When compiling in SLRUM environments like DelftBlue, the following commands are enough to meet requirements: module load 2023r1-gcc11 module load openmpi/4.1.4 module load cmake/3.24.3 module load netcdf-fortran/4.6.0","title":"Requirements"},{"location":"installation/#compilation","text":"Clone the github repo git clone https://github.com/lorenzodonadio/adepostles.git Create a build directory, run Cmake and compile with make cd adepostles mkdir build cd build cmake .. make Compilations is finished, the executable should be located at: /adepostles/build/bin/main","title":"Compilation"},{"location":"namoptions/","text":"Config file sample: Sample namoptions file: &RUN iexpnr = 001 runtime = 700 dtmax = 1 ladaptivedt = .true. lanisotrop = .true. rkmethod = 2 field_load_chunk_size = 2 output_save_interval = 5 courant_limit = 0.8 field_dump_path = \"fielddump_30s.nc\" sources_prefix = \"tracer_inp/tracer_inp_001_001.nc\" outputfile_path = \"must_conc_30s_periodictest.nc\" / &BOUNDARY xboundary = 12 yboundary = 12 / &IBM lapplyibm = .true. ibm_input_file = \"ibm.inp.001\" /","title":"Configuration"},{"location":"namoptions/#config-file-sample","text":"Sample namoptions file: &RUN iexpnr = 001 runtime = 700 dtmax = 1 ladaptivedt = .true. lanisotrop = .true. rkmethod = 2 field_load_chunk_size = 2 output_save_interval = 5 courant_limit = 0.8 field_dump_path = \"fielddump_30s.nc\" sources_prefix = \"tracer_inp/tracer_inp_001_001.nc\" outputfile_path = \"must_conc_30s_periodictest.nc\" / &BOUNDARY xboundary = 12 yboundary = 12 / &IBM lapplyibm = .true. ibm_input_file = \"ibm.inp.001\" /","title":"Config file sample:"},{"location":"run/","text":"Run After you have compiled Adepostles, you are almost ready to run your first simulation. It is adviced to copy the main executable to a separate directory where you want to run the simulation not to clutter build/bin Input files The executable takes only one config file as input, this is usually called namoptions in DALES. but can have any name. A complete description of namoptions can be found here . Within namoptions we must specify 3 file paths: 1. field_dump_path path to the fielddump, the output of the LES simulation merged into one single NetCDF file . The file must contain: time dimension x,y,z coordinates of the domain 4D fields (time,z,y,x): wind velocity (u,v,w), eddy viscosity (ekh) 2D vertical profiles (time, z) of density: rhobf 2. sources_prefix sources_prefix specifies the source file for the concentration, which has both initial conditions and time varying sources. For runs with one single core then source_prefix must be exactly the path to the source file and end with .nc For runs in parallel ,i.e with multiple source files, then only the prefix to the NetCDF file should be provided, and the program will automatically append _001.nc for the first core and _002.nc for the second core and so on. So you must prepare source files that end exactly that way up to the number of cores you are using for the run. 3. ibm_input_file The IBM file is not NetCDF only because DALES still takes a text file as input for the IBM and it is important that the same file use for IBM in the LES is used for Adepostles. Example files: field_dump Here is an example of the result of ncdump -h of a fielddump with the expected format: dimensions: time = 1480 ; zt = 20 ; zm = 20 ; xt = 128 ; xm = 128 ; yt = 128 ; ym = 128 ; variables: float time(time) ; float zt(zt) ; float zm(zm) ; float xt(xt) ; float xm(xm) ; float yt(yt) ; float ym(ym) ; float u(time, zt, yt, xm) ; float v(time, zt, ym, xt) ; float w(time, zm, yt, xt) ; float ekh(time, zt, yt, xt) ; float rhof(time, zt) ; float rhobf(time, zt) ; float rhobh(time, zm) ; float presh(time, zt) ; sources Example of netcdf structure for a source file, that has 2 separate groups (set of tracers) each with only one source init is left empty so it means 0 everywhere one could imagine multiple sources per tracer some utilities to create these source files: TODO insert link netcdf tracer_inp_001_001 { dimensions: time = 10 ; x = 256 ; y = 256 ; z = 40 ; // global attributes: :description = \"NetCDF file for tracer properties\" ; :history = \"Created with T_tracer structure equivalent\" ; :numtracers = 2LL ; :totnumsources = 2LL ; group: s0 { variables: float init(z, y, x) ; float source_1(time) ; source_1:x = 8LL ; source_1:y = 30LL ; source_1:z = 2LL ; // group attributes: :tracname = \"s0\" ; :traclong = \"s0_x_ 8_y_ 30\" ; :unit = \"kg/kg\" ; :molar_mass = -999. ; :lemis = \"true\" ; :numsources = 1LL ; } // group s0 group: s1 { variables: float init(z, y, x) ; float source_1(time) ; source_1:x = 8LL ; source_1:y = 45LL ; source_1:z = 2LL ; // group attributes: :tracname = \"s1\" ; :traclong = \"s1_x_ 8_y_ 45\" ; :unit = \"kg/kg\" ; :molar_mass = -999. ; :lemis = \"true\" ; :numsources = 1LL ; } // group s1 }","title":"Run"},{"location":"run/#run","text":"After you have compiled Adepostles, you are almost ready to run your first simulation. It is adviced to copy the main executable to a separate directory where you want to run the simulation not to clutter build/bin","title":"Run"},{"location":"run/#input-files","text":"The executable takes only one config file as input, this is usually called namoptions in DALES. but can have any name. A complete description of namoptions can be found here . Within namoptions we must specify 3 file paths: 1. field_dump_path path to the fielddump, the output of the LES simulation merged into one single NetCDF file . The file must contain: time dimension x,y,z coordinates of the domain 4D fields (time,z,y,x): wind velocity (u,v,w), eddy viscosity (ekh) 2D vertical profiles (time, z) of density: rhobf 2. sources_prefix sources_prefix specifies the source file for the concentration, which has both initial conditions and time varying sources. For runs with one single core then source_prefix must be exactly the path to the source file and end with .nc For runs in parallel ,i.e with multiple source files, then only the prefix to the NetCDF file should be provided, and the program will automatically append _001.nc for the first core and _002.nc for the second core and so on. So you must prepare source files that end exactly that way up to the number of cores you are using for the run. 3. ibm_input_file The IBM file is not NetCDF only because DALES still takes a text file as input for the IBM and it is important that the same file use for IBM in the LES is used for Adepostles.","title":"Input files"},{"location":"run/#example-files","text":"field_dump Here is an example of the result of ncdump -h of a fielddump with the expected format: dimensions: time = 1480 ; zt = 20 ; zm = 20 ; xt = 128 ; xm = 128 ; yt = 128 ; ym = 128 ; variables: float time(time) ; float zt(zt) ; float zm(zm) ; float xt(xt) ; float xm(xm) ; float yt(yt) ; float ym(ym) ; float u(time, zt, yt, xm) ; float v(time, zt, ym, xt) ; float w(time, zm, yt, xt) ; float ekh(time, zt, yt, xt) ; float rhof(time, zt) ; float rhobf(time, zt) ; float rhobh(time, zm) ; float presh(time, zt) ; sources Example of netcdf structure for a source file, that has 2 separate groups (set of tracers) each with only one source init is left empty so it means 0 everywhere one could imagine multiple sources per tracer some utilities to create these source files: TODO insert link netcdf tracer_inp_001_001 { dimensions: time = 10 ; x = 256 ; y = 256 ; z = 40 ; // global attributes: :description = \"NetCDF file for tracer properties\" ; :history = \"Created with T_tracer structure equivalent\" ; :numtracers = 2LL ; :totnumsources = 2LL ; group: s0 { variables: float init(z, y, x) ; float source_1(time) ; source_1:x = 8LL ; source_1:y = 30LL ; source_1:z = 2LL ; // group attributes: :tracname = \"s0\" ; :traclong = \"s0_x_ 8_y_ 30\" ; :unit = \"kg/kg\" ; :molar_mass = -999. ; :lemis = \"true\" ; :numsources = 1LL ; } // group s0 group: s1 { variables: float init(z, y, x) ; float source_1(time) ; source_1:x = 8LL ; source_1:y = 45LL ; source_1:z = 2LL ; // group attributes: :tracname = \"s1\" ; :traclong = \"s1_x_ 8_y_ 45\" ; :unit = \"kg/kg\" ; :molar_mass = -999. ; :lemis = \"true\" ; :numsources = 1LL ; } // group s1 }","title":"Example files:"},{"location":"utilities/gensources/","text":"How to generate the tracer NetCDF? Ill tell you how WIP","title":"Generate Sources"},{"location":"utilities/gensources/#how-to-generate-the-tracer-netcdf","text":"Ill tell you how WIP","title":"How to generate the tracer NetCDF?"},{"location":"utilities/postprocesdales/","text":"How to post process DALES output to a fielddump ADEpostLES accepts WIP","title":"PostProcess DALES"},{"location":"utilities/postprocesdales/#how-to-post-process-dales-output-to-a-fielddump-adepostles-accepts","text":"WIP","title":"How to post process DALES output to a fielddump ADEpostLES accepts"},{"location":"utilities/visualizations/","text":"How to easily visualize results? WIP","title":"Visualize Results"},{"location":"utilities/visualizations/#how-to-easily-visualize-results","text":"WIP","title":"How to easily visualize results?"}]}